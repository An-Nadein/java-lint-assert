plugins {
    id 'com.gradle.plugin-publish' version '0.10.1'
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    dependencies {
        compile group:'org.junit.jupiter', name:'junit-jupiter-api', version:'5.4.2'
        compile group:'org.junit.jupiter', name:'junit-jupiter-params', version:'5.4.2'

        //junit 5
        testImplementation "org.junit.platform:junit-platform-launcher:1.4.2"
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2') //!IMPORTANT:do not modify, this is the only syntax travis understands.
        testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"
    }
    
    test{
        useJUnitPlatform {}

        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed"
        }
        //to get "Test summary: 1 tests, 1 succeeded, 0 failed, 0 skipped"
        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                logger.error('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'org.lint.azzert'
            artifactId 'java-lint-assert'
            version '0.1.0-SNAPSHOT'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Lint Java unit tests on presense of asserts'
            name 'java-assert-linter'
            url 'https://github.com/jpmorganchase/java-lint-assert'
            organization {
                name 'com.github.jpmorganchase'
                url 'https://github.com/jpmorganchase'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/jpmorganchase/java-lint-assert/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/jpmorganchase/java-lint-assert/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/jpmorganchase/java-lint-assert'
                connection 'scm:git:git://github.com/jpmorganchase/java-lint-assert.git'
                developerConnection 'scm:git:ssh://git@github.com:jpmorganchase/java-lint-assert.git'
            }
        }
    }
}
model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
signing {
    sign configurations.archives
}
// create and sign pom artifact
pom.withXml {
    def pomFile = file("${project.buildDir}/generated-pom.xml")
    writeTo(pomFile)
    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
    artifact(pomAscFile) {
        classifier = null
        extension = 'pom.asc'
    }
}
// create the signed artifacts
project.tasks.signArchives.signatureFiles.each {
    artifact(it) {
        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
        if (matcher.find()) {
            classifier = matcher.group(1)
        } else {
            classifier = null
        }
        extension = 'jar.asc'
    }
}
model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
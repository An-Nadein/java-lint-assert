apply plugin: 'java'

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testRuntime files(createClasspathManifest)
}

buildscript {

    repositories {
        maven {
            name "jpmc-public"
            url "http://repo-proxy.jpmchase.net/maven/content/groups/jpmc-public"
        }
        mavenLocal()

        maven {
            name = 'repoUnderProjectRoot'
            url = uri("$buildDir/../../build/repo")
        }
    }

    dependencies {
        classpath 'com.lint.azzert:plugin:0.0.4-SNAPSHOT'
    }
}

apply plugin: com.lint.azzert.LintTestsPlugin

test{

    lint{

        packageName = "com.lint"

//        def pluginClasspathResource = getClass().classLoader.findResource("plugin-classpath.txt")
//        if (pluginClasspathResource == null) {
//            throw new IllegalStateException("Did not find plugin classpath resource, run `testClasses` build task.")
//        }
//
//        classpath = pluginClasspathResource.readLines().collect { new File(it) }


    }
}
